#
# docker-compose instructions to deploy the product from images
#

version: '3.6'

services:
  capture:
    build:
      context: ./Capture
    image: e2nw/capture
    container_name: e2nwcapture
    depends_on:
      - elasticsearch
    ports:
      - "2055:2055/udp"
      - "5000:5000/tcp"
      - "5000:5000/udp"
    networks:
      - e2netwatch-net
    volumes:
      - ./Capture/filesystem/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./Capture/filesystem/logstash.yml:/usr/share/logstash/config/logstash.yml
      - /etc/localtime:/etc/localtime:ro


  middleware:
    build:
      context: ./Middleware
    image: e2nw/middleware
    container_name: e2nwmiddleware
    depends_on:
      - mysql
      - elasticsearch
    environment:
      - envTarget=stage
    ports:
      - "8080:8080"
    expose:
      - "8080"
    volumes:
      - ReportsData:/var/lib/jetty/src/files/reports
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net
  
  
  frontend:
    build:
      context: ./Frontend
    image: e2nw/frontend
    container_name: e2nwfrontend
    depends_on:
      - middleware
    ports:
      - "80:80"
    networks:
      - e2netwatch-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
    
    
  elasticsearch:
    build:
      context: ./Elasticsearch
    image: e2nw/elasticsearch
    container_name: e2nwelasticsearch
    ports:
      - "9200:9200"
    environment:
      - ES_JAVA_OPTS=-Xms${e2nw_ES_MEM:-512m} -Xmx${e2nw_ES_MEM:-512m}
      - cluster.name=e2nw
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - ElasticData:/usr/share/elasticsearch/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net
  
  
  kibana:
    build:
      context: ./Kibana
    image: e2nw/kibana
    container_name: e2nwkibana
    depends_on:
      - elasticsearch
    expose:
      - "5601"
    ports: 
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://e2nwelasticsearch:9200
    networks:
      - e2netwatch-net
    volumes:
      - /etc/localtime:/etc/localtime:ro

    
  mysql:
    build:
      context: ./Mysql
    image: e2nw/mysql
    container_name: e2nwmysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD="yes"
    ports:
     - "3306:3306"
    volumes:
      - MysqlData:/var/lib/mysql
      - MysqlBackupData:/backup
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - e2netwatch-net
    expose:
       - "2181"
    networks:
      - e2netwatch-net
    volumes:
      - /etc/localtime:/etc/localtime:ro

    
  kafka:
    build:
      context: ./Kafka
    expose:
     - "9092"
    environment:

      # Kafka advertised listener MUST be defined in this way 
      # for us to able to skale kafka.
      # TODO: Understand the process more and add more env variables
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "syslog:1:1, netflow:1:1, nf_raw:1:1"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net

  nifi:
    image: e2nw/nifi
    build:
      context: ./nifi
      args:
        NIFI_VERSION: '1.7.1'
        NIFI_BINARY: 'http://apache.miloslavbrada.cz/nifi/1.7.1/nifi-1.7.1-bin.zip'
        NIFI_TOOLKIT_BINARY: 'http://apache.miloslavbrada.cz/nifi/1.7.1/nifi-toolkit-1.7.1-bin.zip'
    expose:
      - 8090 # Unsecured HTTP Web Port
    ports:
      - "8090:8090"
    environment:
      - NIFI_WEB_HTTP_PORT=8090
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 min
    volumes:
      - ./nifi/conf:/opt/nifi/nifi-current/conf/:rw
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net

  norikra:
    build:
      context: ./norikra
    image: e2nw/norikra
    container_name: e2nwnorikra
    ports:
      - "26578:26578"
      - "26571:26571"
    volumes:
      - Norikra:/var/tmp/norikra:rw
      - /etc/localtime:/etc/localtime:ro
    command: "norikra start --stats /var/tmp/norikra/stats.json -l /var/tmp/norikra"
    networks:
      - e2netwatch-net

volumes:
  ElasticData:
  CaptureData:
  MysqlData:
  MysqlBackupData:
  NiFiconf:
  ReportsData:
  Norikra:

networks:
  e2netwatch-net:
    name: e2netwatch
