#
# docker-compose instructions to deploy the product from images
#

version: '3.6'

services:

  capture:
    build:
      context: ./Capture
    image: e2nw/capture
    ports:
      - "2055:2055/udp"
      - "5000:5000/tcp"
      - "5000:5000/udp"
    networks:
      - e2netwatch-net
    volumes:
      - ./Capture/filesystem/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./Capture/filesystem/logstash.yml:/usr/share/logstash/config/logstash.yml
      - /etc/localtime:/etc/localtime:ro


  middleware:
    build:
      context: ./Middleware
      dockerfile: Dockerfile-${mw_envTarget-stage}
    image: e2nw/middleware
    depends_on:
      - mysql
      - elasticsearch
    environment:
      - envTarget=${mw_envTarget-stage}
    ports:
      - "8080:8080"
    expose:
      - "8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net
  
  
  frontend:
    build:
      context: ./Frontend
    image: e2nw/frontend
    depends_on:
      - middleware
    ports:
      - "80:80"
    networks:
      - e2netwatch-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
    
    
  elasticsearch:
    build:
      context: ./Elasticsearch
    image: e2nw/elasticsearch
    ports:
      - "9200:9200"
    environment:
      - ES_JAVA_OPTS=-Xms${e2nw_ES_MEM:-512m} -Xmx${e2nw_ES_MEM:-512m}
      - cluster.name=e2nw
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - ElasticData:/usr/share/elasticsearch/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net
  
  
  kibana:
    build:
      context: ./Kibana
    image: e2nw/kibana
    depends_on:
      - elasticsearch
    expose:
      - "5601"
    ports: 
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - e2netwatch-net
    volumes:
      - /etc/localtime:/etc/localtime:ro

    
  mysql:
    image: mysql:5.7
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD="yes"
    ports:
     - "3306:3306"
    volumes:
      - MysqlData:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net


  zookeeper:
    build:
      context: ./Zookeeper
    image: e2nw/zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    expose:
      - "2181"
    ports:
      - "2181:2181"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net


  kafka:
    image: e2nw/kafka
    build:
      context: ./Kafka
    expose:
      - "9092"
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      # Kafka advertised listener MUST be defined in this way 
      # for us to able to scale kafka.
      # 2 listeners for internal and external connections
      KAFKA_LISTENERS: LISTEN_INTERNAL://:9092, LISTEN_EXTERNAL://:29092
      # map correct protocols to listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTEN_INTERNAL:PLAINTEXT, LISTEN_EXTERNAL:PLAINTEXT      
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTEN_INTERNAL
      # advertise both listeners
      KAFKA_ADVERTISED_LISTENERS: LISTEN_INTERNAL://kafka:9092, LISTEN_EXTERNAL://localhost:29092
      # zookeeper to connect to
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "syslog:1:1, netflow:1:1, nf_raw:1:1, nifi-debug:1:1, nifi-error:1:1, connection_raw:1:1"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - e2netwatch-net


  nifi:
    image: e2nw/nifi
    build:
      context: ./NiFi
      args:
        NIFI_VERSION: '1.7.1'
        NIFI_BINARY: 'http://apache.miloslavbrada.cz/nifi/1.7.1/nifi-1.7.1-bin.zip'
        NIFI_TOOLKIT_BINARY: 'http://apache.miloslavbrada.cz/nifi/1.7.1/nifi-toolkit-1.7.1-bin.zip'
    expose:
      - 8090 # Unsecured HTTP Web Port
    ports:
      - "8090:8090"
    environment:
      - NIFI_WEB_HTTP_PORT=8090
      - NIFI_CLUSTER_IS_NODE=true
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
      - NIFI_ZK_CONNECT_STRING=zookeeper:2181
      - NIFI_ELECTION_MAX_WAIT=1 min
    volumes:
      - ./NiFi/conf:/opt/nifi/nifi-current/conf/:rw
      - /etc/localtime:/etc/localtime:ro
      - ./NiFi/nifi-esper-e2-processor/nifi-esper-e2-nar/target/nifi-esper-e2-nar-1.1.9.nar:/opt/nifi/nifi-current/lib/nifi-esper-e2-1.1.9.nar
    networks:
      - e2netwatch-net


  norikra:
    build:
      context: ./Norikra
    image: e2nw/norikra
    ports:
      - "26578:26578"
      - "26571:26571"
    volumes:
      - Norikra:/var/tmp/norikra:rw
      - /etc/localtime:/etc/localtime:ro
    command: "norikra start --stats /var/tmp/norikra/stats.json -l /var/tmp/norikra"
    networks:
      - e2netwatch-net

  nf-aggregator:
    build:
      context: ./nf-aggregator
    image: e2nw/nf-aggregator
    depends_on:
      - kafka
    command: 'java -jar netflow-flowaggregation-1.0.1-jar-with-dependencies.jar'
    networks:
      - e2netwatch-net

volumes:
  ElasticData:
  MysqlData:
  Norikra:

networks:
  e2netwatch-net:
    name: e2netwatch
