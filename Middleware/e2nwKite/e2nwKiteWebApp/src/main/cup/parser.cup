// CUP specification for a simple expression evaluator (no actions)

import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */

/* Terminals (tokens returned by the scanner). */
terminal            COMMA, APO, LEFTPAREN, RIGHTPAREN;
terminal            SRC, DST, PROTO, PRT, FLAGS;
terminal            SUM, COUNT, MIN, MAX, DCARD, SCARD, PCARD;
terminal            SSCOPE, DSCOPE;
terminal            MATCHES, GT, LT, EQ, AND, OR, PLUS, MINUS, MULTIPLY, DIVISION;
terminal            FOUND, LISTED, AS;
terminal            NOW;
terminal String     IDENTIFIER;
terminal String     TIME;
terminal String     NETWORK;
terminal String     FLAGS_string;
terminal Integer    INT_flex;
terminal Float      FLOAT_flex;

/* Non terminals */
non terminal        term;
non terminal        lookup;
non terminal        key;
non terminal        binop;
non terminal        eval, eval_op;
non terminal        scope, scope_op;
non terminal        const;
non terminal        apotime, aponetwork, apoflags, apoidentifier;

/* Precedences */
precedence left     LEFTPAREN, RIGHTPAREN;
precedence left     AND, OR;
precedence left     MULTIPLY, DIVISION;
precedence left     PLUS, MINUS;
precedence left     MATCHES, GT, LT, EQ;


/* Start pattern */
start with term;

/* The grammar */
term        ::= LEFTPAREN term RIGHTPAREN
              | term binop term
              | key FOUND lookup
              | eval
              | key
              | aponetwork
              | apoidentifier
              | apoflags
              | const
              ;
lookup      ::= LEFTPAREN lookup RIGHTPAREN
              | LISTED apotime COMMA apotime COMMA apoidentifier AS apoidentifier
              ;
key         ::= SRC
              | DST
              | PROTO
              | PRT
              | FLAGS
              ;
binop       ::= MATCHES
              | GT
              | LT
              | EQ
              | AND
              | OR
              | PLUS
              | MINUS
              | MULTIPLY
              | DIVISION
              ;
eval        ::= eval_op apotime COMMA apotime COMMA term
              | eval_op scope COMMA apotime COMMA apotime COMMA term
              ;
eval_op     ::= SUM
              | COUNT
              | MIN
              | MAX
              | DCARD
              | SCARD
              | PCARD
              ;
scope       ::= scope_op aponetwork
              | scope_op lookup
              ;
scope_op    ::= SSCOPE
              | DSCOPE
              ;
const       ::= INT_flex
              | FLOAT_flex
              ;
apotime     ::= APO TIME APO
              ;
aponetwork  ::= APO NETWORK APO
              ;
apoflags    ::= APO FLAGS_string APO
              ;
apoidentifier ::= APO IDENTIFIER APO
              ;
