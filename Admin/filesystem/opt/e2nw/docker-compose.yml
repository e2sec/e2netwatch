#
# docker-compose instructions to deploy the product from images
#

version: '3'

services:
  capture:
    image: e2nw/capture
    container_name: e2nwcapture
    depends_on:
      - elasticsearch
    ports:
      - "2055:2055/udp"


  backend:
    image: e2nw/backend
    container_name: e2nwbackend
    depends_on:
      - mysql
      - elasticsearch

      
  middleware:
    image: e2nw/middleware
    container_name: e2nwmiddleware
    depends_on:
      - mysql
      - elasticsearch
    expose:
      - "8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.proxy
      - ReportsData:/var/lib/jetty/src/files/reports
  
  
  frontend:
    image: e2nw/frontend
    container_name: e2nwfrontend
    depends_on:
      - middleware
    ports:
      - "80:80"
    
    
  elasticsearch:
    image: e2nw/elasticsearch
    container_name: e2nwelasticsearch
    ports:
      - "9200:9200"
    environment:
      - ES_JAVA_OPTS=-Xms${e2nw_ES_MEM:-512m} -Xmx${e2nw_ES_MEM:-512m}
      - cluster.name=e2nw
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - ElasticData:/usr/share/elasticsearch/data
  
  
#  logstash:
#    image: e2nw/logstash
#    container_name: e2nwlogstash
#    depends_on:
#      - elasticsearch
#    ports:
#      - 514:5140
#      - 514:5140/udp
  
  
  kibana:
    image: e2nw/kibana
    container_name: e2nwkibana
    depends_on:
      - elasticsearch
    expose:
      - "5601"
    environment:
      ELASTICSEARCH_URL: http://e2nwelasticsearch:9200

    
  mysql:
    image: e2nw/mysql
    container_name: e2nwmysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD="yes"
    expose:
     - "3306"
    volumes:
      - MysqlData:/var/lib/mysql
      - MysqlBackupData:/backup


volumes:
  ElasticData:
  CaptureData:
  MysqlData:
  MysqlBackupData:
  ReportsData:
